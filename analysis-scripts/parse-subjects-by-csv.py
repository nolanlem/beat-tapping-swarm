#!/usr/bin/env python2import numpy as np import matplotlib.pyplot as plt import sys import globimport pandas as pdfrom shutil import copyfileimport reimport csvimport os import operatoros.chdir('/Users/nolanlem/Documents/kura/kura-new-cond/py/psychopy/swarm-tapping-study')def removeStrFormatting(str_arr):    str_arr = str_arr[1:-1] # remove "'[" and "]'"    str_arr = str.split(str_arr, ',') # split strings    try:        str_arr = [float(elem) for elem in str_arr] # cast each str as float    except ValueError:        pass    #str_arr = np.array(str_arr, dtype=np.float32) # str to float    return str_arrdef parseTapsBlocks(dataFrame1, dataFrame2, idealtaps=1600):    taps_array_1, taps_array_2 = [],[]    taps_block_1 = dataFrame1    for tap in taps_block_1:        taps_array_1.extend(removeStrFormatting(tap))    #taps_array_1 = taps_array_1.remove('')        taps_block_2 = dataFrame2    for tap in taps_block_2:        taps_array_2.extend(removeStrFormatting(tap))    #taps_array_2 = taps_array_2.remove('')    alltaps = taps_array_1 + taps_array_2         #print('for the taps provided: \n')    print("%r taps: %r/%r = %r percent" %(csv_file, len(alltaps), idealtaps, 100*len(alltaps)/idealtaps))       return (100*len(alltaps)/idealtaps)#%%#%% make dir for renamed csv filesrenamed_csv_dir = './mturk-csv/batchA1-renamed/'if os.path.exists(renamed_csv_dir) == False:    os.mkdir(renamed_csv_dir)              #%%# import csv# with open('innovators.csv', 'w', newline='') as file:#     writer = csv.writer(file)#     writer.writerow(["SN", "Name", "Contribution"])#     writer.writerow([1, "Linus Torvalds", "Linux Kernel"])#     writer.writerow([2, "Tim Berners-Lee", "World Wide Web"])#     writer.writerow([3, "Guido van Rossum", "Python Programming"])#%%versions = ['A1','A2','B1','B2']batch_folder = 'batch-A1'batch_renamed_folder = 'batch-A1-renamed'# string prompts email_prompt = "If you are not an MTurk worker, please provide your email address"mturk_prompts = ['If you are a MTurk worker, what is your MTurk worker ID?',"If you are a MTurk worker, what is your MTurk worker ID?'"]os_prompt = ['OS']renamed_participant_csv = []all_participants = []stanford_participants = []csv_files_w_email = {}      # dictionary to hold csv filename indexed by email addresscsv_files_w_mturk = {}subject_tap_score = {}csv_files_w_win = []csv_files_w_mac = []csv_files_w_linux = []stanford_participants = []email_given_participants = []cnt_tag = 1 tap_resp_block1 = 'block1_taps.rt'tap_resp_block2 = 'block2_taps.rt'tap_blocks = [tap_resp_block1, tap_resp_block2]csv_filename = './mturk-csv/' + batch_folder + '/' + batch_folder + '-participant-stats_rev.csv'with open('./mturk-csv/' + batch_folder + '/' + batch_folder + '-STATS.csv','w', newline= '') as file:     writer = csv.writer(file)    writer.writerow(['version', 'day', 'batch', 'participant', 'newname', 'mturk-id','email', 'os-type', 'strong stim score', 'filename'])    for version in versions:        for csv_file in glob.glob(os.path.join('./mturk-csv/', batch_folder, version, "*.csv")):            #print('analyzing %r'%(csv_file))            csvfile = pd.read_csv(csv_file, keep_default_na=False)            participant_initials = csvfile['Participant Initials'][0]            mturk_id = 'none'             email = 'none'            experiment_version = os.path.basename(csv_file).split('.')[0].split('_')[1].split('-')[1]            batch = os.path.basename(csv_file).split('.')[0].split('_')[2].split('-')[2]            month = os.path.basename(csv_file).split('.')[0].split('_')[2].split('-')[1]             day = os.path.basename(csv_file).split('.')[0].split('_')[2].split('-')[2]            month_day = month + '-' + day            month_day = str(month_day)                        score = 0.0                        if float(batch) < 16:                batch_version = '1'            else:                batch_version = '2'                        try:                mturk_id = csvfile[mturk_prompts[0]][0]                email = csvfile[email_prompt][0]                #print(mturk_id)            except:                pass                try:                mturk_id = csvfile[mturk_prompts[1]][0]                email = csvfile[email_prompt][0]                            #print(mturk_id)            except:                pass                        ostype = csvfile['OS'][0]            if csvfile['OS'][0].startswith('Win'):                csv_files_w_win.append(csv_file)            if csvfile['OS'][0].startswith('Mac'):                csv_files_w_mac.append(csv_file)            if csvfile['OS'][0].startswith('Lin'):                csv_files_w_linux.append(csv_file)                    ##############                try:                alltaps_block1 = csvfile[tap_resp_block1][4:44]                alltaps_block2 = csvfile[tap_resp_block2][44:]                print('for all taps')                score = parseTapsBlocks(alltaps_block1, alltaps_block2, idealtaps=1600)                                print('for strong stimuli:')                strong_cond_block1 = csvfile[csvfile.cond.str.contains('strong')][tap_resp_block1]                strong_cond_block2 = csvfile[csvfile.cond.str.contains('strong')][tap_resp_block2]                score = parseTapsBlocks(strong_cond_block1.iloc[1:11], strong_cond_block2[11:], idealtaps=400) # ideal  taps 20 beats* (5(tempo_cond)*2(versions)*2(blocks))                            subject_tap_score[participant_initials] = score                                            print('----------------------\n')            except KeyError:                print('participant %r did not tap'%(participant_initials))                print('---------------\n')                subject_tap_score[participant_initials] = 0.0                 score = 0.0                print(experiment_version, '\t\t', month_day, '\t\t', participant_initials, '\t\t', mturk_id, '\t\t', email, '\t', ostype, '\t\t', os.path.basename(csv_file))                                    participant_renamed = participant_initials + ' ' + str(cnt_tag) + '.csv'            all_participants.append(participant_renamed)                        #make cp of renamed file and --> batch1-renamed dir            copyfile(csv_file, os.path.join(renamed_csv_dir, participant_renamed))                        renamed_participant_csv.append(participant_renamed)                        cnt_tag += 1 # inc counter tag                         writer.writerow([experiment_version, month_day, batch_version, participant_initials, participant_renamed, mturk_id, email, ostype, score, os.path.basename(csv_file)])        #%% SORT BY TAP SCORE # for now, do manually in excel         #%% get data based off of email or MTurk worker ID field # count total number of taps in all stimuli block 1 and 2 # for csv_file in glob.glob('./mturk-csv/batch1-renamed/*.csv'): # all csvssubject_tap_score = {}  # this is their rating for the strong stimuli num_taps/ideal_num_taps name_to_id = {}# for csv_file in csv_files_w_mac:    for csv_file in glob.glob('./mturk-csv/batch2-renamed/*.csv'): # all csvs    csvfile = pd.read_csv(csv_file, keep_default_na = False)        participant = csvfile['Participant Initials'][0]    sndfile = csvfile['sndfile']    os_type = csvfile['OS'][0]        print('FOR PARTICIPANT %r using %r' %(participant, os_type))    name_to_id[participant] = csv_file     try:        alltaps_block1 = csvfile[tap_resp_block1][4:44]        alltaps_block2 = csvfile[tap_resp_block2][44:]        print('for all taps')        score = parseTapsBlocks(alltaps_block1, alltaps_block2, idealtaps=1600)                print('for strong stimuli:')        strong_cond_block1 = csvfile[csvfile.cond.str.contains('strong')][tap_resp_block1]        strong_cond_block2 = csvfile[csvfile.cond.str.contains('strong')][tap_resp_block2]        score = parseTapsBlocks(strong_cond_block1.iloc[1:11], strong_cond_block2[11:], idealtaps=400) # ideal  taps 20 beats* (5(tempo_cond)*2(versions)*2(blocks))            subject_tap_score[participant] = score                    print('----------------------\n')    except KeyError:        print('participant %r did not tap'%(participant))        print('---------------\n')        subject_tap_score[participant] = 0.0              sorted_scores = {k: v for k, v in sorted(subject_tap_score.items(), key=lambda item: item[1])}   print(sorted_scores)            #%%all_sync_cond = ['strong', 'medium', 'weak', 'none']sync_cond = 'strong'for csv_file in glob.glob('./mturk-csv/batch1-renamed/*.csv'): # all csvs    df = pd.read_csv(csv_file, keep_default_na = False)        participant = csvfile['Participant Initials'][0]    sndfile = csvfile['sndfile']    os_type = csvfile['OS'][0]        print('FOR PARTICIPANT %r using %r' %(participant, os_type))    try:        tap_values_1 = df[df.cond.str.contains(sync_cond)][tap_resp_block1].iloc[:10].values        tap_values_1 = removeStrFormatting(tap_values_1)                       tap_values_2 = df[df.cond.str.contains(sync_cond)][tap_resp_block2].iloc[-10:].values        tap_values_2 = removeStrFormatting(tap_values_2)                                            